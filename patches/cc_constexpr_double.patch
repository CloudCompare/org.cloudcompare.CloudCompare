diff --git a/CC/include/CCConst.h b/CC/include/CCConst.h
index 8ab70a93..085e3cae 100644
--- a/CC/include/CCConst.h
+++ b/CC/include/CCConst.h
@@ -33,17 +33,17 @@ constexpr double M_PI = 3.14159265358979323846;
 
 //! Pi/2
 #ifndef M_PI_2
-constexpr double M_PI_2 = (M_PI/2.0);
+const double M_PI_2 = (M_PI/2.0);
 #endif
 
 //! Square root of 3
 constexpr double SQRT_3 = 1.7320508075688772935274463415059;
 
 //! Conversion factor from radians to degrees
-constexpr double CC_RAD_TO_DEG = (180.0/M_PI);
+const double CC_RAD_TO_DEG = (180.0/M_PI);
 
 //! Conversion factor from degrees to radians
-constexpr double CC_DEG_TO_RAD = (M_PI/180.0);
+const double CC_DEG_TO_RAD = (M_PI/180.0);
 
 //! Numerical threshold for considering a value as "zero"
 constexpr double ZERO_TOLERANCE = static_cast<double>(FLT_EPSILON);
diff --git a/libs/qCC_db/ccCameraSensor.cpp b/libs/qCC_db/ccCameraSensor.cpp
index e19b9804..d159de07 100644
--- a/libs/qCC_db/ccCameraSensor.cpp
+++ b/libs/qCC_db/ccCameraSensor.cpp
@@ -53,9 +53,9 @@ void ccCameraSensor::IntrinsicParameters::GetKinectDefaults(IntrinsicParameters&
 	//default Kinect parameters from:
 	// "Accuracy and Resolution of Kinect Depth Data for Indoor Mapping Applications"
 	// Kourosh Khoshelham and Sander Oude Elberink
-	constexpr float focal_mm		= static_cast<float>(5.45 * 1.0e-3);	// focal length (real distance in meter)
-	constexpr float pixelSize_mm	= static_cast<float>(9.3 * 1.0e-6);		// pixel size (real distance in meter)
-	
+	const float focal_mm		= static_cast<float>(5.45 * 1.0e-3);	// focal length (real distance in meter)
+	const float pixelSize_mm	= static_cast<float>(9.3 * 1.0e-6);		// pixel size (real distance in meter)
+
 	params.vertFocal_pix      = ConvertFocalMMToPix(focal_mm, pixelSize_mm);
 	params.pixelSize_mm[0]    = pixelSize_mm;
 	params.pixelSize_mm[1]    = pixelSize_mm;
@@ -2400,7 +2400,7 @@ bool ccOctreeFrustumIntersector::build(CCLib::DgmOctree* octree)
 	{
 		cell.clear();
 	}
-	
+
 	const CCLib::DgmOctree::cellsContainer& thePointsAndTheirCellCodes = octree->pointsAndTheirCellCodes();
 	CCLib::DgmOctree::cellsContainer::const_iterator it = thePointsAndTheirCellCodes.begin();
 
diff --git a/libs/qCC_db/ccColorTypes.h b/libs/qCC_db/ccColorTypes.h
index d456f3e8..f8925358 100644
--- a/libs/qCC_db/ccColorTypes.h
+++ b/libs/qCC_db/ccColorTypes.h
@@ -119,7 +119,7 @@ namespace ccColor
 
 	// Predefined colors (default type)
 	constexpr Rgb whiteRGB					(MAX, MAX, MAX);
-	constexpr Rgb lightGreyRGB				(static_cast<ColorCompType>(MAX*0.8), static_cast<ColorCompType>(MAX*0.8), static_cast<ColorCompType>(MAX*0.8));
+	const Rgb lightGreyRGB					(static_cast<ColorCompType>(MAX*0.8), static_cast<ColorCompType>(MAX*0.8), static_cast<ColorCompType>(MAX*0.8));
 	constexpr Rgb darkGreyRGB				(MAX / 2, MAX / 2, MAX / 2);
 	constexpr Rgb redRGB					(MAX, 0, 0);
 	constexpr Rgb greenRGB					(0, MAX, 0);
@@ -133,7 +133,7 @@ namespace ccColor
 
 	// Predefined colors (default type)
 	constexpr Rgba white					(MAX, MAX, MAX, MAX);
-	constexpr Rgba lightGrey				(static_cast<ColorCompType>(MAX*0.8), static_cast<ColorCompType>(MAX*0.8), static_cast<ColorCompType>(MAX*0.8), MAX);
+	const Rgba lightGrey					(static_cast<ColorCompType>(MAX*0.8), static_cast<ColorCompType>(MAX*0.8), static_cast<ColorCompType>(MAX*0.8), MAX);
 	constexpr Rgba darkGrey					(MAX / 2, MAX / 2, MAX / 2, MAX);
 	constexpr Rgba red						(MAX, 0, 0, MAX);
 	constexpr Rgba green					(0, MAX, 0, MAX);
